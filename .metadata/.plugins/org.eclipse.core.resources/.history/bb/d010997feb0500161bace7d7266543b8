import static org.junit.Assert.*;

import org.junit.Test;

public class CheeseTyperTests {
	
	@Test
	public void EndGameTest(){
		fail();
	}
	
	//Tests that all scores were combined appropriately
	@Test
	public void TallyPointsTest(){
		fail();
	}
	
	/**
	*	Tests that CalculateBaseWordScore returns the word length as the score for words that are
	*	under 5 characters in length.
	*/
	@Test
	public void CalculateBaseWordScoreTest1(){
		assertEquals(CheeseTyper.CalculateBaseWordScore("fox"), 3);
	}
	
	/**
	 * Tests that CalculateBaseWordScore returns an int equal to the length of the word, plus 3 if
	 * its length is between 15 and 19 characters.
	 */
	@Test
	public void CalculateBaseWordScoreTest2(){
		assertEquals(CheeseTyper.CalculateBaseWordScore("superfluous"), ("superfluous".length()+3));
	}
	
	/**
	 * Tests that CalculateBaseWordScore returns the int 0 when given an empty String.
	 */
	@Test
	public void CalculateBaseWordScoreTest3(){
		assertEquals(CheeseTyper.CalculateBaseWordScore(""), 0);
	}
	
	/**
	 * Tests that CalculateBaseWordScore returns the int 0 when given a null String.
	 * Previously did not check for this case and it caused a problem.
	 */
	@Test
	public void CalculateBaseWordScoreTest4(){
		assertEquals(CheeseTyper.CalculateBaseWordScore(null), 0);
	}
	
	@Test
	public void CalculateBaseWordScoreTest5(){
		assertEquals(CheeseTyper.CalculateBaseWordScore("Pneumonoultramicroscopicsilicovolcanoconiosis"), 
				("Pneumonoultramicroscopicsilicovolcanoconiosis".length()+7));
	}
	
	@Test
	public void BonusPointCalculatorTest(){
		fail();
	}

	@Test
	public void ErrorDetectionTest(){
		fail();
	}
	
	@Test
	public void TimeCounterTest(){
		fail();
	}
	
	@Test
	public void DictionaryInputTest(){
		fail();
	}
	
	/**
	 * Tests that RandomlySelectString does not return the same String each time it is called.
	 * This is a nondeterministic test, so there is a chance that it will fail.  However, as long
	 * as it passes roughly 653 out of 654 trials, this test passes.
	 */
	@Test
	public void RandomlySelectString1(){
		assertNotEquals(CheeseTyper.RandomlySelectString(), CheeseTyper.RandomlySelectString());
	}
	
	
	@Test
	public void CalculateLetterBonusPoints1(){
		assertTrue(CheeseTyper.CalculateLetterBonusPoints("Queso Blanco con Frutas --Pina y Mango")>2);
	}
	
	@Test
	public void CalculateLetterBonusPoints2(){
		assertEquals(CheeseTyper.CalculateLetterBonusPoints(""),0);
	}
	
	@Test
	public void CalculateLetterBonusPoints3(){
		assertTrue(CheeseTyper.CalculateLetterBonusPoints(null)==0);
	}
	
	@Test
	public void CalculateLetterBonusPoints4(){
		assertTrue(CheeseTyper.CalculateLetterBonusPoints("Sottocenare al Tartufo")==0);
	}
}
